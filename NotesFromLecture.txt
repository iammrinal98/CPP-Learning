Left Shift:
-add shiftTimes zero at the end of bits.
-for major cases/small number the logic -> number*(2)^shiftTimes.
-for large number -> number became in negetive.
Example: 17<<1 = 17*(2)^1 = 34, 17<<2 = 17*(2)^2 = 68

Right Shift:
-add shiftTimes zero at the begining of bits.
-for right shift the logic is -> number/(2)^shiftTimes.
Example : 17>>1 = 17/(2)^1 = 8, 17>>2 = 17/(2)^2 = 4

Post Increment/Decrement:
-first use the value of number and after execution increment/decrement the number.
Example:
a=2, i=3;
int sum = a + (i++)
		= 2 + 3
		= 5
After execution of sum the value of i became 4;

Pre Increment/Decrement:
-first increment/decrement the value of number and assign it to number
Example:
a=2, i=3;
int sum = a + (++i)
		= 2 + 4
		= 6
First the value of i incremented to 4 then it assign to i;